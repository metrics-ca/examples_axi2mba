//----------------------------------------------------------------------
/**
 * @file vf_axi_intf.svi
 * @brief Defines VF AXI interface.
 */
/*
 * Copyright (C) 2007-2012 Verifore, Inc.
 * All rights reserved. Property of Verifore, Inc.
 * Restricted rights to use, duplicate or disclose
 * this code are granted through contract.
 */
//----------------------------------------------------------------------
`ifndef _VF_AXI_INTF_SVI_
`define _VF_AXI_INTF_SVI_
//`protect

`include "vf_axi_defines.inc"

//======================================================================
/**
 * VF AXI interface.
 */
//======================================================================

interface vf_axi_intf();

   //===================================================================
   // parameters
   //===================================================================

   parameter INPUT_SKW  = 1ns;
   parameter OUTPUT_SKW = 1ns;

   //===================================================================
   // signals
   //===================================================================

   // Clock and Reset
   wire                          aclk        ;
   wire                          aresetn     ;

   // Write Address Channel
   wire [`VF_AXI_ID_WIDTH-1:0]   awid        ;
   wire [`VF_AXI_ADDR_WIDTH-1:0] awaddr      ;
   wire [7:0]                    awlen       ;
   wire [2:0]                    awsize      ;
   wire [1:0]                    awburst     ;
   wire [1:0]                    awlock      ;
   wire [3:0]                    awcache     ;
   wire [2:0]                    awprot      ;
   wire                          awvalid     ;
   wire                          awready     ;
   wire [`VF_AXI_SIDE_WIDTH-1:0] awsideband  ;

   // Write Data Channel
   wire [`VF_AXI_ID_WIDTH-1:0]   wid         ;
   wire [`VF_AXI_DATA_WIDTH-1:0] wdata       ;
   wire [`VF_AXI_STRB_WIDTH-1:0] wstrb       ;
   wire                          wlast       ;
   wire                          wvalid      ;
   wire                          wready      ;
   wire [`VF_AXI_SIDE_WIDTH-1:0] wsideband   ;

   // Write Response Channel
   wire [`VF_AXI_ID_WIDTH-1:0]   bid         ;
   wire [1:0]                    bresp       ;
   wire                          bvalid      ;
   wire                          bready      ;
   wire [`VF_AXI_SIDE_WIDTH-1:0] bsideband   ;

   // Read Address Channel
   wire [`VF_AXI_ID_WIDTH-1:0]   arid        ;
   wire [`VF_AXI_ADDR_WIDTH-1:0] araddr      ;
   wire [7:0]                    arlen       ;
   wire [2:0]                    arsize      ;
   wire [1:0]                    arburst     ;
   wire [1:0]                    arlock      ;
   wire [3:0]                    arcache     ;
   wire [2:0]                    arprot      ;
   wire                          arvalid     ;
   wire                          arready     ;
   wire [`VF_AXI_SIDE_WIDTH-1:0] arsideband  ;

   // Read Data Channel
   wire [`VF_AXI_ID_WIDTH-1:0]   rid         ;
   wire [`VF_AXI_DATA_WIDTH-1:0] rdata       ;
   wire [1:0]                    rresp       ;
   wire                          rlast       ;
   wire                          rvalid      ;
   wire                          rready      ;
   wire [`VF_AXI_SIDE_WIDTH-1:0] rsideband   ;

   // Low-power interface
   wire                          csysreq     ;
   wire                          csysack     ;
   wire                          cactive     ;

   //===================================================================
   // clockings
   //===================================================================

   //---------------------------------------------------
   // master port clocking
   //---------------------------------------------------

   clocking mstr_clking @( posedge aclk );
      default input #INPUT_SKW output #OUTPUT_SKW;
      input    aresetn     ;

      // Write Address Channel
      output   awid        ;
      output   awaddr      ;
      output   awlen       ;
      output   awsize      ;
      output   awburst     ;
      output   awlock      ;
      output   awcache     ;
      output   awprot      ;
      output   awvalid     ;
      input    awready     ;
      output   awsideband  ;

      // Write Data Channel
      output   wid         ;
      output   wdata       ;
      output   wstrb       ;
      output   wlast       ;
      output   wvalid      ;
      input    wready      ;
      output   wsideband   ;

      // Write Response Channel
      input    bid         ;
      input    bresp       ;
      input    bvalid      ;
      output   bready      ;
      input    bsideband   ;

      // Read Address Channel
      output   arid        ;
      output   araddr      ;
      output   arlen       ;
      output   arsize      ;
      output   arburst     ;
      output   arlock      ;
      output   arcache     ;
      output   arprot      ;
      output   arvalid     ;
      input    arready     ;
      output   arsideband  ;

      // Read Data Channel
      input    rid         ;
      input    rdata       ;
      input    rresp       ;
      input    rlast       ;
      input    rvalid      ;
      output   rready      ;
      input    rsideband   ;

      // Low-power interface
      input    csysreq     ;
      output   csysack     ;
      output   cactive     ;
   endclocking: mstr_clking

   //---------------------------------------------------
   // slave port clocking
   //---------------------------------------------------

   clocking slv_clking @( posedge aclk );
      default input #INPUT_SKW output #OUTPUT_SKW;
      input    aresetn     ;

      // Write Address Channel
      input    awid        ;
      input    awaddr      ;
      input    awlen       ;
      input    awsize      ;
      input    awburst     ;
      input    awlock      ;
      input    awcache     ;
      input    awprot      ;
      input    awvalid     ;
      output   awready     ;
      input    awsideband  ;

      // Write Data Channel
      input    wid         ;
      input    wdata       ;
      input    wstrb       ;
      input    wlast       ;
      input    wvalid      ;
      output   wready      ;
      input    wsideband   ;

      // Write Response Channel
      output   bid         ;
      output   bresp       ;
      output   bvalid      ;
      input    bready      ;
      output   bsideband   ;

      // Read Address Channel
      input    arid        ;
      input    araddr      ;
      input    arlen       ;
      input    arsize      ;
      input    arburst     ;
      input    arlock      ;
      input    arcache     ;
      input    arprot      ;
      input    arvalid     ;
      output   arready     ;
      input    arsideband  ;

      // Read Data Channel
      output   rid         ;
      output   rdata       ;
      output   rresp       ;
      output   rlast       ;
      output   rvalid      ;
      input    rready      ;
      output   rsideband   ;

      // Low-power interface
      input    csysreq     ;
      output   csysack     ;
      output   cactive     ;
   endclocking: slv_clking

   //---------------------------------------------------
   // monitor port clocking
   //---------------------------------------------------

   clocking mon_clking @( posedge aclk );
      default input #INPUT_SKW output #OUTPUT_SKW;
      input    aresetn     ;

      // Write Address Channel
      input    awid        ;
      input    awaddr      ;
      input    awlen       ;
      input    awsize      ;
      input    awburst     ;
      input    awlock      ;
      input    awcache     ;
      input    awprot      ;
      input    awvalid     ;
      input    awready     ;
      input    awsideband  ;

      // Write Data Channel
      input    wid         ;
      input    wdata       ;
      input    wstrb       ;
      input    wlast       ;
      input    wvalid      ;
      input    wready      ;
      input    wsideband   ;

      // Write Response Channel
      input    bid         ;
      input    bresp       ;
      input    bvalid      ;
      input    bready      ;
      input    bsideband   ;

      // Read Address Channel
      input    arid        ;
      input    araddr      ;
      input    arlen       ;
      input    arsize      ;
      input    arburst     ;
      input    arlock      ;
      input    arcache     ;
      input    arprot      ;
      input    arvalid     ;
      input    arready     ;
      input    arsideband  ;

      // Read Data Channel
      input    rid         ;
      input    rdata       ;
      input    rresp       ;
      input    rlast       ;
      input    rvalid      ;
      input    rready      ;
      input    rsideband   ;

      // Low-power interface
      input    csysreq     ;
      input    csysack     ;
      input    cactive     ;
   endclocking: mon_clking

   //===================================================================
   // modports
   //===================================================================

   modport mstr( clocking mstr_clking );
   modport  slv( clocking  slv_clking );
   modport  mon( clocking  mon_clking );

endinterface: vf_axi_intf
//`endprotect
`endif // `ifndef _VF_AXI_INTF_SVI_
